// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project cde98c358c3069ef "matt.buzz", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { Time, className, css, fonts } from "./chunks/time-date.js";
import { routes } from "./chunks/routes.js";

// virtual:position-time
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/bOeCoCJHrs8emj69ZtPR/EQ3wRMssdy3Lbkpe55LD/yO1RGvvnp.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	CycleVariantState,
	Fetcher,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useOnVariantChange,
	usePrefetch,
	usePreloadQuery,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var TimeDateFonts = getFonts(Time);
var cycleOrder = ["FdPp7SphX", "WQvTZXkLI"];
var serializationHash = "framer-KOW1O";
var variantClassNames = {
	FdPp7SphX: "framer-v-9udc9x",
	WQvTZXkLI: "framer-v-1audwou",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	damping: 80,
	delay: 0,
	mass: 1,
	stiffness: 400,
	type: "spring",
};
var query = (prefetch) =>
	prefetch({
		cacheDuration: 86400,
		credentials: "same-origin",
		errorFallbackValue: "Error",
		fallbackValue: "Cairo",
		resultKeyPath: "city",
		resultOutputType: "string",
		url: `https://api.fetch.tools/location`,
	});
var toString = (value) => {
	return typeof value === "string" ? value : String(value);
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var preload = async (prequery, prefetch, props) =>
	await Promise.all([query(prefetch)]);
var preloadStatements = {
	FdPp7SphX: preload,
	WQvTZXkLI: preload,
};
var useLoadingVariant = (
	variant,
	gestures,
	clearLoadingVariant,
	setGestureState,
	props,
) => {
	const prequery = usePreloadQuery();
	const prefetch = usePrefetch();
	React.useEffect(() => {
		const promise = preloadStatements[variant];
		if (!promise || !gestures?.[variant]?.loading) return;
		promise(prequery, prefetch, props)
			.then(() => clearLoadingVariant())
			.catch(() =>
				setGestureState({
					isError: true,
				}),
			);
	}, [variant]);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	Position: "FdPp7SphX",
	Time: "WQvTZXkLI",
};
var getProps = ({ height, id, position, width, ...props }) => {
	return {
		...props,
		cmS0KoqX2: position ?? props.cmS0KoqX2 ?? "Design & Art Director",
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "FdPp7SphX",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		cmS0KoqX2,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "FdPp7SphX",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onAppear1w3a9x9 = activeVariantCallback(async (...args) => {
		await delay(() => setVariant(CycleVariantState, true), 3e3);
	});
	useOnVariantChange(baseVariant, {
		default: onAppear1w3a9x9,
	});
	const sharedStyleClassNames = [className];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	useLoadingVariant(baseVariant, void 0, clearLoadingGesture, setGestureState);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-9udc9x",
							className2,
							classNames,
						)}
						data-framer-name={"Position"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"FdPp7SphX"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								WQvTZXkLI: {
									"data-framer-name": "Time",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-1e4ftq1"}
							data-framer-name={"Content"}
							layoutDependency={layoutDependency}
							layoutId={"aDPzw0Phk"}
						>
							<RichText
								__fromCanvasComponent={true}
								className={"framer-1hev9jn"}
								data-framer-name={"Text"}
								fonts={["Inter"]}
								layoutDependency={layoutDependency}
								layoutId={"nVZ5X3UGZ"}
								style={{
									"--extracted-r6o4lv":
										"var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255))",
									"--framer-link-text-color": "rgb(0, 153, 255)",
									"--framer-link-text-decoration": "underline",
									skewY: 0,
								}}
								text={cmS0KoqX2}
								variants={{
									WQvTZXkLI: {
										skewY: 12,
									},
								}}
								verticalAlignment={"top"}
								withExternalLayout={true}
							>
								<React.Fragment>
									<motion.p
										className={"framer-styles-preset-1heszc"}
										data-styles-preset={"sKEnL7zSU"}
										style={{
											"--framer-text-color":
												"var(--extracted-r6o4lv, var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255)))",
										}}
									>
										{"Design & Art Director"}
									</motion.p>
								</React.Fragment>
							</RichText>
							<motion.div
								className={"framer-17dvrv3"}
								data-framer-name={"City + Time"}
								layoutDependency={layoutDependency}
								layoutId={"nbAW8irTM"}
								style={{
									skewY: 12,
								}}
								variants={{
									WQvTZXkLI: {
										skewY: 0,
									},
								}}
							>
								<Fetcher
									disabled={isLoading}
									requests={[
										{
											cacheDuration: 86400,
											credentials: "same-origin",
											errorFallbackValue: "Error",
											fallbackValue: "Cairo",
											resultKeyPath: "city",
											resultOutputType: "string",
											url: `https://api.fetch.tools/location`,
										},
									]}
								>
									{(fetchResult) => (
										<RichText
											__fromCanvasComponent={true}
											className={"framer-1h7r6ov"}
											data-framer-name={"Text"}
											fonts={["Inter"]}
											layoutDependency={layoutDependency}
											layoutId={"Uex5hAPS3"}
											style={{
												"--extracted-r6o4lv":
													"var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255))",
												"--framer-link-text-color": "rgb(0, 153, 255)",
												"--framer-link-text-decoration": "underline",
											}}
											text={toString(fetchResult[0])}
											verticalAlignment={"top"}
											withExternalLayout={true}
										>
											<React.Fragment>
												<motion.p
													className={"framer-styles-preset-1heszc"}
													data-styles-preset={"sKEnL7zSU"}
													style={{
														"--framer-text-color":
															"var(--extracted-r6o4lv, var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255)))",
													}}
												>
													{"Cairo"}
												</motion.p>
											</React.Fragment>
										</RichText>
									)}
								</Fetcher>
								<RichText
									__fromCanvasComponent={true}
									className={"framer-htwn3n"}
									data-framer-name={"Dot"}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"IQdAFTG4o"}
									style={{
										"--framer-link-text-color": "rgb(0, 153, 255)",
										"--framer-link-text-decoration": "underline",
									}}
									variants={{
										WQvTZXkLI: {
											"--extracted-r6o4lv":
												"var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255))",
										},
									}}
									verticalAlignment={"top"}
									withExternalLayout={true}
									{...addPropertyOverrides(
										{
											WQvTZXkLI: {
												children: (
													<React.Fragment>
														<motion.p
															className={"framer-styles-preset-1heszc"}
															data-styles-preset={"sKEnL7zSU"}
															style={{
																"--framer-text-color":
																	"var(--extracted-r6o4lv, var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255)))",
															}}
														>
															{"\u2022"}
														</motion.p>
													</React.Fragment>
												),
											},
										},
										baseVariant,
										gestureVariant,
									)}
								>
									<React.Fragment>
										<motion.p
											className={"framer-styles-preset-1heszc"}
											data-styles-preset={"sKEnL7zSU"}
										>
											{"\u2022"}
										</motion.p>
									</React.Fragment>
								</RichText>
								<ComponentViewportProvider>
									<SmartComponentScopedContainer
										className={"framer-1cy3gk0-container"}
										isAuthoredByUser={true}
										isModuleExternal={true}
										layoutDependency={layoutDependency}
										layoutId={"g3BupONTY-container"}
										nodeId={"g3BupONTY"}
										rendersWithMotion={true}
										scopeId={"yO1RGvvnp"}
									>
										<Time
											color={
												"var(--token-ca1e8363-88d0-40f1-abb8-1f9ce6252271, rgb(255, 255, 255))"
											}
											font={{
												fontFamily:
													'"Open Sauce Sans", "Open Sauce Sans Placeholder", sans-serif',
												fontSize: "14px",
												fontStyle: "normal",
												fontWeight: 500,
												letterSpacing: "-0.02em",
												lineHeight: "1.4em",
											}}
											height={"100%"}
											id={"g3BupONTY"}
											layoutId={"g3BupONTY"}
											monthFormat={"long"}
											outputType={"time"}
											showMinutes={true}
											showMonth={true}
											showSeconds={false}
											showWeekday={true}
											showYear={true}
											tabularFont={true}
											timeFormat={"12h"}
											width={"100%"}
										/>
									</SmartComponentScopedContainer>
								</ComponentViewportProvider>
							</motion.div>
						</motion.div>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-KOW1O.framer-sc9v5a, .framer-KOW1O .framer-sc9v5a { display: block; }",
	".framer-KOW1O.framer-9udc9x { align-content: flex-start; align-items: flex-start; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 6px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: min-content; }",
	".framer-KOW1O .framer-1e4ftq1 { align-content: flex-start; align-items: flex-start; align-self: stretch; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 16px; height: 20px; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: auto; }",
	".framer-KOW1O .framer-1hev9jn, .framer-KOW1O .framer-1h7r6ov, .framer-KOW1O .framer-htwn3n { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-KOW1O .framer-17dvrv3 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 4px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
	".framer-KOW1O .framer-1cy3gk0-container { flex: none; height: auto; position: relative; width: auto; }",
	".framer-KOW1O.framer-v-1audwou .framer-1e4ftq1 { justify-content: flex-end; }",
	...css,
];
var FrameryO1RGvvnp = withCSS(Component, css2, "framer-KOW1O");
var stdin_default = FrameryO1RGvvnp;
FrameryO1RGvvnp.displayName = "Position + Time";
FrameryO1RGvvnp.defaultProps = {
	height: 20,
	width: 139.5,
};
addPropertyControls(FrameryO1RGvvnp, {
	variant: {
		options: ["FdPp7SphX", "WQvTZXkLI"],
		optionTitles: ["Position", "Time"],
		title: "Variant",
		type: ControlType.Enum,
	},
	cmS0KoqX2: {
		defaultValue: "Design & Art Director",
		displayTextArea: false,
		title: "Position",
		type: ControlType.String,
	},
});
addFonts(
	FrameryO1RGvvnp,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
				{
					family: "Open Sauce Sans",
					source: "builtIn",
					style: "normal",
					url: "https://framerusercontent.com/assets/O2R7AhA6wjBk0GHLJl0N8fqxN0.woff2",
					weight: "500",
				},
			],
		},
		...TimeDateFonts,
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:position-time
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "FdPp7SphX",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"cde98c358c3069ef2a8dce28a8c2c8459e940a47824cf38ac0a6e3a305f8bfbb"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders PositionTimeFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"cde98c358c3069ef2a8dce28a8c2c8459e940a47824cf38ac0a6e3a305f8bfbb"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var position_time_default = ComponentWithRoot;
export { position_time_default as default };
