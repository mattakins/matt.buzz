// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project cde98c358c3069ef "matt.buzz", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-54YFTX6O.js";

// virtual:blur-gradient
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/jJm3F0cvgxQnH1wso32K/oSNd9MGlqblWvznK1SbQ/h3Lv4e_xP.js
import { jsx as _jsx2 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls2,
	ComponentViewportProvider,
	ControlType as ControlType2,
	cx,
	getFonts,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion as motion2, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";

// /:https://framerusercontent.com/modules/rofp3mS0LNY15cjhHzia/mqQEarGIByho1rG31aTv/BlurGradient_Prod.js
import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from "react";
import { motion } from "unframer";
import { addPropertyControls, ControlType } from "unframer";
function BlurGradient({ blur, borderRadius, direction, transition }) {
	const blurSteps = useMemo(
		() => [
			{
				blur: `${blur / 2 / 2 / 2 / 2 / 2 / 2 / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 12.5%, rgba(0, 0, 0, 1) 25%, rgba(0, 0, 0, 0) 37.5%`,
			},
			{
				blur: `${blur / 2 / 2 / 2 / 2 / 2 / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 12.5%, rgba(0, 0, 0, 1) 25%, rgba(0, 0, 0, 1) 37.5%, rgba(0, 0, 0, 0) 50%`,
			},
			{
				blur: `${blur / 2 / 2 / 2 / 2 / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 25%, rgba(0, 0, 0, 1) 37.5%, rgba(0, 0, 0, 1) 50%, rgba(0, 0, 0, 0) 62.5%`,
			},
			{
				blur: `${blur / 2 / 2 / 2 / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 37.5%, rgba(0, 0, 0, 1) 50%, rgba(0, 0, 0, 1) 62.5%, rgba(0, 0, 0, 0) 75%`,
			},
			{
				blur: `${blur / 2 / 2 / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 1) 62.5%, rgba(0, 0, 0, 1) 75%, rgba(0, 0, 0, 0) 87.5%`,
			},
			{
				blur: `${blur / 2 / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 62.5%, rgba(0, 0, 0, 1) 75%, rgba(0, 0, 0, 1) 87.5%, rgba(0, 0, 0, 0) 100%`,
			},
			{
				blur: `${blur / 2}px`,
				gradient: `rgba(0, 0, 0, 0) 75%, rgba(0, 0, 0, 1) 87.5%, rgba(0, 0, 0, 1) 100%`,
			},
			{
				blur: `${blur}px`,
				gradient: `rgba(0, 0, 0, 0) 87.5%, rgba(0, 0, 0, 1) 100%`,
			},
		],
		[blur],
	);
	return (
		<div
			style={{
				position: "absolute",
				inset: 0,
				overflow: "hidden",
			}}
		>
			{blurSteps.map((step, index) => (
				<motion.div
					transition={transition}
					initial={{
						backdropFilter: `blur(${step.blur})`,
					}}
					animate={{
						backdropFilter: `blur(${step.blur})`,
					}}
					style={{
						opacity: 1,
						position: "absolute",
						inset: 0,
						zIndex: index + 1,
						maskImage: `linear-gradient(${direction}, ${step.gradient})`,
						WebkitMaskImage: `linear-gradient(${direction}, ${step.gradient})`,
						borderRadius,
						pointerEvents: "none",
					}}
				/>
			))}
		</div>
	);
}
BlurGradient.defaultProps = {
	blur: 10,
	borderRadius: "0px",
	direction: "toBottom",
	transition: {
		duration: 0.3,
	},
};
addPropertyControls(BlurGradient, {
	blur: {
		title: "Blur",
		type: ControlType.Number,
		defaultValue: 10,
		min: 0,
		max: 100,
		step: 1,
		description: "Large blur values (10<) can impact performance.",
	},
	borderRadius: {
		title: "Radius",
		type: ControlType.BorderRadius,
		defaultValue: "0px",
		description:
			"Blur Gradient component's parent frame can't have border radius (it will break the component). If you need corner radius, apply it directly to the Blur Gradient component here.",
	},
	direction: {
		title: "Direction",
		type: ControlType.SegmentedEnum,
		options: ["to bottom", "to top", "to left", "to right"],
		optionTitles: ["\u2193", "\u2191", "\u2190", "\u2192"],
		defaultValue: "to bottom",
	},
	transition: {
		type: ControlType.Transition,
		defaultValue: {
			duration: 0.3,
		},
		title: "Transition",
		description:
			"Control how the blur animates when used on hover states or any othe interaction.\n\nMore components at [Framer University](https://frameruni.link/cc).",
	},
});
BlurGradient.displayName = "Blur Gradient";
var stdin_default = BlurGradient;

// /:https://framerusercontent.com/modules/jJm3F0cvgxQnH1wso32K/oSNd9MGlqblWvznK1SbQ/h3Lv4e_xP.js
var BlurGradientFonts = getFonts(stdin_default);
var cycleOrder = ["amVTajLCM", "qQS8eRAac"];
var serializationHash = "framer-IgQyG";
var variantClassNames = {
	amVTajLCM: "framer-v-s43ql8",
	qQS8eRAac: "framer-v-59jlpe",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion2.create(React.Fragment);
var humanReadableVariantMap = {
	Hide: "qQS8eRAac",
	Show: "amVTajLCM",
};
var getProps = ({ blur, height, id, width, ...props }) => {
	return {
		...props,
		p4Ecax7Xe: blur ?? props.p4Ecax7Xe ?? 6,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "amVTajLCM",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, p4Ecax7Xe, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "amVTajLCM",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const isDisplayed = () => {
		if (baseVariant === "qQS8eRAac") return false;
		return true;
	};
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion2.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-s43ql8",
							className,
							classNames,
						)}
						data-framer-name={"Show"}
						layoutDependency={layoutDependency}
						layoutId={"amVTajLCM"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								qQS8eRAac: {
									"data-framer-name": "Hide",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						{isDisplayed() && (
							<ComponentViewportProvider>
								<SmartComponentScopedContainer
									className={"framer-16nfsn3-container"}
									data-framer-name={"Blur Gradient (Bottom)"}
									isAuthoredByUser={true}
									isModuleExternal={true}
									layoutDependency={layoutDependency}
									layoutId={"eOpr9GmCC-container"}
									name={"Blur Gradient (Bottom)"}
									nodeId={"eOpr9GmCC"}
									rendersWithMotion={true}
									scopeId={"h3Lv4e_xP"}
								>
									{_jsx2(stdin_default, {
										blur: p4Ecax7Xe,
										borderRadius: "0px",
										direction: "to top",
										height: "100%",
										id: "eOpr9GmCC",
										layoutId: "eOpr9GmCC",
										name: "Blur Gradient (Bottom)",
										style: {
											height: "100%",
											width: "100%",
										},
										transition: {
											delay: 0,
											duration: 0.3,
											ease: [0.44, 0, 0.56, 1],
											type: "tween",
										},
										width: "100%",
									})}
								</SmartComponentScopedContainer>
							</ComponentViewportProvider>
						)}
					</motion2.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-IgQyG.framer-bntgcy, .framer-IgQyG .framer-bntgcy { display: block; }",
	".framer-IgQyG.framer-s43ql8 { height: 96px; overflow: hidden; position: relative; width: 780px; }",
	".framer-IgQyG .framer-16nfsn3-container { bottom: 0px; flex: none; height: 96px; left: 0px; pointer-events: none; position: absolute; right: 0px; z-index: 1; }",
];
var Framerh3Lv4e_xP = withCSS(Component, css, "framer-IgQyG");
var stdin_default2 = Framerh3Lv4e_xP;
Framerh3Lv4e_xP.displayName = "Blur Gradient";
Framerh3Lv4e_xP.defaultProps = {
	height: 96,
	width: 780,
};
addPropertyControls2(Framerh3Lv4e_xP, {
	variant: {
		options: ["amVTajLCM", "qQS8eRAac"],
		optionTitles: ["Show", "Hide"],
		title: "Variant",
		type: ControlType2.Enum,
	},
	p4Ecax7Xe: {
		defaultValue: 6,
		max: 100,
		min: 0,
		step: 1,
		title: "Blur",
		type: ControlType2.Number,
	},
});
addFonts(
	Framerh3Lv4e_xP,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...BlurGradientFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:blur-gradient
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "amVTajLCM",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"cde98c358c3069ef2a8dce28a8c2c8459e940a47824cf38ac0a6e3a305f8bfbb"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders BlurGradientFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"cde98c358c3069ef2a8dce28a8c2c8459e940a47824cf38ac0a6e3a305f8bfbb"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var blur_gradient_default = ComponentWithRoot;
export { blur_gradient_default as default };
