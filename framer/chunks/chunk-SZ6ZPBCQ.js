// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project cde98c358c3069ef "matt.buzz", do not edit manually */
// /:https://framerusercontent.com/modules/tPA7cIKObWPQ1LpfPJ90/CWpNatIVAZ4ZT5JlTtu5/Text_Reveal.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { addPropertyControls, ControlType } from "unframer";
import { motion, useScroll, useTransform } from "unframer";
import { useRef } from "react";
var EachCharacter = ({ char, start, end, progress }) => {
  const opacityProgress = useTransform(progress, [start, end], [0.2, 1]);
  return /* @__PURE__ */ _jsx(motion.span, { style: { opacity: opacityProgress }, children: char });
};
var EachWord = ({ word, progress, starting, ending }) => {
  const characters = word.split("");
  const wordLength = word.length;
  const amount = ending - starting;
  const step = amount / wordLength;
  return /* @__PURE__ */ _jsxs(motion.span, { style: { whiteSpace: "pre" }, children: [characters.map((char, idx) => {
    const charStart = starting + step * idx;
    const charEnd = starting + step * (idx + 1);
    return /* @__PURE__ */ _jsx(EachCharacter, { char, start: charStart, end: charEnd, progress }, idx);
  }), "\xA0"] });
};
function Text_Reveal(props) {
  const text = props.text;
  const lines = text.split("\n");
  const words = text.split(/\s+/);
  const totalWords = words.length;
  const ref = useRef(null);
  const { scrollYProgress } = useScroll({ target: ref, offset: ["start 0.31", "end 0.3"] });
  let wordIndex = 0;
  return /* @__PURE__ */ _jsx("div", { ref, style: { ...props.font, display: "flex", flexDirection: "column", color: props.textColor, whiteSpace: "pre-wrap", lineHeight: 1.2 }, children: lines.map((line, lineIndex) => {
    const lineWords = line.split(" ");
    return /* @__PURE__ */ _jsx("div", { style: { display: "flex", flexWrap: "wrap" }, children: lineWords.map((word, idx) => {
      const safeTotal = totalWords + 1;
      const starting = wordIndex / safeTotal;
      const ending = (wordIndex + 1) / safeTotal;
      wordIndex++;
      return /* @__PURE__ */ _jsx(EachWord, { word, progress: scrollYProgress, starting, ending }, `${lineIndex}-${idx}`);
    }) }, lineIndex);
  }) });
}
addPropertyControls(Text_Reveal, { text: { title: "Text", type: ControlType.String, defaultValue: "Hello Text\nNew Paragraph", displayTextArea: true }, font: { type: "font", controls: "extended" }, textColor: { type: ControlType.Color } });

export {
  Text_Reveal
};
