// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project cde98c358c3069ef "matt.buzz", do not edit manually */
// /:https://framerusercontent.com/modules/HYcHVPAbe8jLEeU7c4mp/QiycTxX7vdblEOi3o00G/Time.js
import { jsx as _jsx } from "react/jsx-runtime";
import { addPropertyControls, ControlType, RenderTarget, useLocaleCode } from "unframer";
import { startTransition, useCallback, useEffect, useRef, useState } from "react";
var fontStack = `"Inter", system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`;
function formatTimeOrDate(outputType, { showYear, showMonth, showWeekday, showMinutes, showSeconds }, timeFormat, monthFormat, localCode) {
  const date = /* @__PURE__ */ new Date();
  const onlyYearIsShown = !showWeekday && !showMonth && showYear;
  switch (outputType) {
    case "date":
      return new Intl.DateTimeFormat(localCode, { weekday: showWeekday ? "long" : void 0, day: onlyYearIsShown ? void 0 : "numeric", month: showMonth ? monthFormat : void 0, year: showYear ? "numeric" : void 0 }).format(date);
    case "time":
      return new Intl.DateTimeFormat(localCode, { hour: "numeric", minute: showMinutes ? "numeric" : void 0, second: showSeconds && showMinutes ? "numeric" : void 0, hour12: timeFormat === "12h" }).format(date);
    default:
      return new Intl.DateTimeFormat(localCode).format(date);
  }
}
var defaultProps = { height: 20, width: 140, outputType: "time", color: "#999", timeFormat: "24h", showYear: true, showMonth: true, showWeekday: true, showMinutes: true, showSeconds: true, monthFormat: "long", alignment: "center" };
function Time(props) {
  const mergedProps = { ...defaultProps, ...props };
  const {
    outputType,
    timeFormat,
    showYear,
    showMonth,
    showWeekday,
    // showHours,
    showMinutes,
    showSeconds,
    monthFormat,
    color,
    font,
    tabularFont
  } = mergedProps;
  const localCode = useLocaleCode();
  const getTextContent = useCallback(() => formatTimeOrDate(outputType, {
    showYear,
    showMonth,
    showWeekday,
    // showHours,
    showMinutes,
    showSeconds
  }, timeFormat, monthFormat, localCode), [localCode, monthFormat, outputType, showMinutes, showMonth, showSeconds, showWeekday, showYear, timeFormat]);
  const timeoutRef = useRef();
  const updateCountdown = useCallback((node) => {
    if (node === null) {
      clearTimeout(timeoutRef.current);
      return;
    }
    let prev;
    const tick = () => {
      const date = /* @__PURE__ */ new Date();
      const next = (/* @__PURE__ */ new Date()).setSeconds(date.getSeconds() + 1, 0) - +date;
      timeoutRef.current = setTimeout(tick, next);
      const textContent = getTextContent();
      if (prev !== textContent) {
        node.textContent = textContent;
        prev = textContent;
      }
    };
    tick();
  }, [getTextContent]);
  const [visible, setIsVisible] = useState(false);
  const isCanvas = RenderTarget.current() === RenderTarget.canvas;
  useEffect(() => {
    startTransition(() => setIsVisible(true));
    if (isCanvas) return;
  }, [isCanvas]);
  return /* @__PURE__ */ _jsx("p", { suppressHydrationWarning: true, style: { margin: 0, padding: 0, color, fontFamily: fontStack, fontWeight: 500, fontSize: 16, lineHeight: 1, visibility: visible ? "visible" : "hidden", ...font, fontVariantNumeric: tabularFont ? "tabular-nums" : "normal", whiteSpace: "nowrap" }, ref: isCanvas ? void 0 : updateCountdown, children: getTextContent() });
}
Time.displayName = "Time & Date";
addPropertyControls(Time, {
  outputType: { title: "Type", type: ControlType.Enum, displaySegmentedControl: true, options: ["date", "time"], optionTitles: ["Date", "Time"], defaultValue: defaultProps.outputType },
  showWeekday: { title: "Day", type: ControlType.Boolean, enabledTitle: "Show", disabledTitle: "Hide", defaultValue: defaultProps.showWeekday, hidden: (props) => props.outputType !== "date" },
  showMonth: { title: "Month", type: ControlType.Boolean, enabledTitle: "Show", disabledTitle: "Hide", defaultValue: defaultProps.showMonth, hidden: (props) => props.outputType !== "date" },
  monthFormat: { title: "Format", type: ControlType.Enum, options: ["short", "long", "numeric"], optionTitles: ["Short", "Long", "Numeric"], defaultValue: defaultProps.monthFormat, hidden: (props) => props.outputType !== "date" || !props.showMonth },
  showYear: { title: "Year", type: ControlType.Boolean, enabledTitle: "Show", disabledTitle: "Hide", defaultValue: defaultProps.showYear, hidden: (props) => props.outputType !== "date" },
  timeFormat: { title: "Format", type: ControlType.Enum, options: ["12h", "24h"], optionTitles: ["12h", "24h"], displaySegmentedControl: true, defaultValue: defaultProps.timeFormat, hidden: (props) => props.outputType !== "time" },
  // showHours: {
  //     title: "Hours",
  //     type: ControlType.Boolean,
  //     enabledTitle: "Show",
  //     disabledTitle: "Hide",
  //     defaultValue: defaultProps.showHours,
  //     hidden: (props) => props.outputType !== "time",
  // },
  showMinutes: { title: "Minutes", type: ControlType.Boolean, enabledTitle: "Show", disabledTitle: "Hide", defaultValue: defaultProps.showMinutes, hidden: (props) => props.outputType !== "time" },
  showSeconds: { title: "Seconds", type: ControlType.Boolean, enabledTitle: "Show", disabledTitle: "Hide", defaultValue: defaultProps.showSeconds, hidden: (props) => props.outputType !== "time" || !props.showMinutes },
  font: { type: ControlType.Font, controls: "extended" },
  tabularFont: { title: "Tabular", type: ControlType.Boolean, defaultValue: true },
  color: { type: ControlType.Color, defaultValue: defaultProps.color }
});

// /:https://framerusercontent.com/modules/p8eKr4TJOU16e93e7GMT/7H0D2OQO8xdVTSpZl9RT/sKEnL7zSU.js
import { fontStore } from "unframer";
fontStore.loadFonts(["BI;Open Sauce Sans/Medium/v0"]);
var fonts = [{ explicitInter: true, fonts: [{ family: "Open Sauce Sans", source: "builtIn", style: "normal", url: "https://framerusercontent.com/assets/O2R7AhA6wjBk0GHLJl0N8fqxN0.woff2", weight: "500" }] }];
var css = ['.framer-pytU4 .framer-styles-preset-1heszc:not(.rich-text-wrapper), .framer-pytU4 .framer-styles-preset-1heszc.rich-text-wrapper p { --framer-font-family: "Open Sauce Sans", "Open Sauce Sans Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 14px; --framer-font-style: normal; --framer-font-variation-axes: normal; --framer-font-weight: 500; --framer-letter-spacing: -0.02em; --framer-line-height: 1.4em; --framer-paragraph-spacing: 0px; --framer-text-alignment: start; --framer-text-color: var(--token-5fde730a-8086-4528-a317-d71b3bf4efde, #ffffff); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }'];
var className = "framer-pytU4";

export {
  Time,
  fonts,
  css,
  className
};
