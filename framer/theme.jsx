// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project cde98c358c3069ef "matt.buzz", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { stdin_default } from "./chunks/chunk-JNGIXIAD.js";
import { routes } from "./chunks/chunk-54YFTX6O.js";

// virtual:theme
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/eSBMBlNSns8ik4n8nH04/qNwnMV6xJcD2qjJ4rDvv/FrHvXhqmV.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	cx,
	getFonts,
	getPropertyControls,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var ThemeToggleFonts = getFonts(stdin_default);
var ThemeToggleControls = getPropertyControls(stdin_default);
var serializationHash = "framer-7fJUK";
var variantClassNames = {
	DPte3KPaC: "framer-v-1wvnutb",
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 400,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableEnumMap = {
	"Variant 2": "IFTxxXlL5",
	"Variant 3": "o3JNQH70g",
	"Variant 4": "aexHCFV6M",
	"Variant 6": "Gwm03yRT0",
	Desktop: "TzgVzetvp",
	Phone: "aP0q0e5A5",
};
var getProps = ({ height, id, variant1, width, ...props }) => {
	return {
		...props,
		WWUpHWDUE:
			humanReadableEnumMap[variant1] ??
			variant1 ??
			props.WWUpHWDUE ??
			"TzgVzetvp",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, WWUpHWDUE, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "DPte3KPaC",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1wvnutb",
							className,
							classNames,
						)}
						data-framer-name={"Default"}
						layoutDependency={layoutDependency}
						layoutId={"DPte3KPaC"}
						ref={refBinding}
						style={{
							...style,
						}}
					>
						<ComponentViewportProvider
							height={14}
							y={
								(componentViewport?.y || 0) +
								(0 + ((componentViewport?.height || 28) - 0 - 14) / 2)
							}
						>
							<SmartComponentScopedContainer
								className={"framer-15505ox-container"}
								layoutDependency={layoutDependency}
								layoutId={"nhmO6vUbM-container"}
								nodeId={"nhmO6vUbM"}
								rendersWithMotion={true}
								scopeId={"FrHvXhqmV"}
							>
								{_jsx(stdin_default, {
									height: "100%",
									id: "nhmO6vUbM",
									layoutId: "nhmO6vUbM",
									variant: WWUpHWDUE,
									width: "100%",
								})}
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-7fJUK.framer-uzvngz, .framer-7fJUK .framer-uzvngz { display: block; }",
	".framer-7fJUK.framer-1wvnutb { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 28px; justify-content: center; overflow: visible; padding: 0px; position: relative; width: min-content; }",
	".framer-7fJUK .framer-15505ox-container { flex: none; height: auto; position: relative; width: auto; }",
];
var FramerFrHvXhqmV = withCSS(Component, css, "framer-7fJUK");
var stdin_default2 = FramerFrHvXhqmV;
FramerFrHvXhqmV.displayName = "Theme";
FramerFrHvXhqmV.defaultProps = {
	height: 28,
	width: 14,
};
addPropertyControls(FramerFrHvXhqmV, {
	WWUpHWDUE: ThemeToggleControls?.["variant"] && {
		...ThemeToggleControls["variant"],
		defaultValue: "TzgVzetvp",
		description: void 0,
		hidden: void 0,
		title: "Variant",
	},
});
addFonts(
	FramerFrHvXhqmV,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...ThemeToggleFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:theme
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"cde98c358c3069ef2a8dce28a8c2c8459e940a47824cf38ac0a6e3a305f8bfbb"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ThemeFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"cde98c358c3069ef2a8dce28a8c2c8459e940a47824cf38ac0a6e3a305f8bfbb"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var theme_default = ComponentWithRoot;
export { theme_default as default };
